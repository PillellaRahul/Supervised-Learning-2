# Import Libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error
import matplotlib.pyplot as plt

# Generate Synthetic Dataset
np.random.seed(42)
data = {
    'Size (sq ft)': np.random.randint(500, 5000, 100),
    'Bedrooms': np.random.randint(1, 5, 100),
    'Bathrooms': np.random.randint(1, 4, 100),
    'Location': np.random.choice(['Urban', 'Suburban', 'Rural'], 100),
    'Year Built': np.random.randint(1970, 2023, 100),
    'Price': np.random.randint(50000, 500000, 100)
}

df = pd.DataFrame(data)

# Encode Categorical Variable
df['Location'] = df['Location'].map({'Urban': 2, 'Suburban': 1, 'Rural': 0})

# Split Data into Features and Target
X = df[['Size (sq ft)', 'Bedrooms', 'Bathrooms', 'Location', 'Year Built']]
y = df['Price']

# Split Data into Training and Testing Sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Random Forest Regressor
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make Predictions on Test Set
y_pred = model.predict(X_test)

# Evaluate the Model
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))

print(f"Mean Absolute Error: {mae}")
print(f"Root Mean Squared Error: {rmse}")

# Visualize Predicted vs Actual Prices
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, alpha=0.7, color="green")
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], '--', color='red')
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual vs Predicted Prices (Random Forest)")
plt.show()
